{"version":3,"sources":["components/materialui/Styles.js","components/AlertMessage.js","components/authenthication/Login.js","components/authenthication/Register.js","components/dashboard/PostForm.js","components/dashboard/SearchPosts.js","components/dashboard/FetchPosts.js","components/dashboard/Dashboard.js","components/NotFound.js","components/Navbar.js","components/postDetails/AddComment.js","components/toolfunctions/ParseJwt.js","components/Likes.js","components/postDetails/PostDetails.js","components/materialui/Theme.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","search","width","fetchPosts","marginLeft","marginRight","postForm","position","top","left","alignSelf","navbarGrid","justify","alignItems","addCommentTextArea","marginTop","marginBottom","listItem","display","flexDirection","listItemSecondaryText","divider","boxContainer","postDetailsBox","textAlign","postBox","padding","postContent","commentContent","wordWrap","postInfo","fontStyle","likesGrid","direction","AlertMessage","props","useState","open","setOpen","handleClose","event","reason","Snackbar","onClose","action","IconButton","onClick","Alert","severity","sx","message","Login","user","setUsers","classes","status","setStatus","navigate","useNavigate","handleChange","name","target","value","values","Box","className","id","onSubmit","preventDefault","email","password","fetch","method","body","JSON","stringify","headers","then","response","json","data","success","localStorage","setItem","token","window","location","reload","msg","key","Math","random","TextField","label","onChange","type","Button","variant","color","Register","authToken","getItem","PostForm","post","setPost","code","description","title","Authorization","res","document","getElementById","fullWidth","multiline","rows","SearchPosts","InputProps","endAdornment","onKeyPress","e","a","searchTerm","blur","searchResults","length","setPosts","FetchPostsClass","state","posts","postData","this","setState","codeBlocks","getElementsByClassName","i","hljs","List","map","index","ListItem","bgcolor","Typography","_id","cursor","ListItemText","primary","Fragment","secondary","component","substring","indexOf","timestamp","Divider","React","Component","FetchPosts","Dashboard","largeScreen","useMediaQuery","breakpoints","up","dashBoardBox","Grid","container","spacing","item","xs","NotFound","NavBar","loggedIn","setLoggedIn","goHome","useEffect","flexGrow","AppBar","Toolbar","removeItem","navButton","to","AddComment","comment","setComment","content","fetchPostAndHighlight","ParseJwt","base64","split","replace","parse","atob","Likes","vote","setVote","likes","displayableVotes","setDisplayableVotes","updateLikes","handleUndoLike","getLikes","parsedToken","foundVote","votes","find","element","toString","PostDetailsClass","codeBlock","comments","PostDetails","useParams","createTheme","palette","main","background","contrastText","select","contrastThreshold","tonalOffset","App","ThemeProvider","minHeight","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.04c441b9.chunk.js","sourcesContent":["import { makeStyles } from \"@mui/styles\";\r\n\r\n//The styles for the app are done here\r\n//Import and call the useStyles function to create a classes object, holding all of the css.\r\nconst useStyles = makeStyles((theme) => ({\r\n  search: {\r\n    width: \"35%\",\r\n  },\r\n\r\n  fetchPosts: {\r\n    marginLeft: \"2%\",\r\n    marginRight: \"2%\",\r\n  },\r\n\r\n  //Make the postform stay on the right side at all times\r\n  postForm: {\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: 0,\r\n    alignSelf: \"start\",\r\n  },\r\n\r\n  navbarGrid: {\r\n    justify: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  addCommentTextArea: {\r\n    marginTop: \"20px\",\r\n    marginBottom: \"10px\",\r\n  },\r\n\r\n  listItem: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n\r\n  listItemSecondaryText: {\r\n    display: \"inline-block\",\r\n    marginTop: \"10px\",\r\n  },\r\n\r\n  divider: { marginTop: \"20px\" },\r\n\r\n  boxContainer: {\r\n    marginTop: \"20vh\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  postDetailsBox: {\r\n    width: \"80%\",\r\n    marginLeft: \"10%\",\r\n    marginTop: \"5%\",\r\n    textAlign: \"left\",\r\n  },\r\n\r\n  postBox: {\r\n    padding: \"3%\",\r\n  },\r\n\r\n  postContent: {\r\n    marginTop: \"1%\",\r\n  },\r\n\r\n  commentContent: {\r\n    wordWrap: \"break-word\",\r\n    marginTop: \"1%\",\r\n  },\r\n\r\n  postInfo: {\r\n    fontStyle: \"italic\",\r\n    marginTop: \"1%\",\r\n  },\r\n  likesGrid: {\r\n    direction: \"row\",\r\n    marginTop: \"1%\",\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import React, { useState } from \"react\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Close from \"@mui/icons-material/Close\";\r\nimport Alert from \"@mui/material/Alert\";\r\n\r\n//Alert messages component for various actions in the application\r\nexport default function AlertMessage(props) {\r\n  //State to show the snackbar or not, default to true when called\r\n  const [open, setOpen] = useState(true);\r\n\r\n  function handleClose(event, reason) {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    //Close the snackbar\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar\r\n        open={open}\r\n        onClose={handleClose}\r\n        action={[\r\n          <IconButton onClick={handleClose}>\r\n            <Close />\r\n          </IconButton>,\r\n        ]}\r\n      >\r\n        <Alert\r\n          onClose={handleClose}\r\n          //Get the severity/color from props.\r\n          severity={props.severity}\r\n          sx={{ width: \"100%\" }}\r\n        >\r\n          {/* get the alert message from props. */}\r\n          {props.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Box from \"@mui/material/Box\";\r\nimport useStyles from \"../materialui/Styles\";\r\nimport AlertMessage from \"../AlertMessage\";\r\n\r\n//Component to login users\r\nexport const Login = () => {\r\n  //User is set unto this state.\r\n  const [user, setUsers] = useState(null);\r\n  //Classes to get styles.\r\n  const classes = useStyles();\r\n  //Status is used for snackbar alert messages.\r\n  const [status, setStatus] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  //When data is changed in the form, get the name and value of the change and append or update them onto the user state.\r\n  function handleChange(event) {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    setUsers((values) => ({ ...values, [name]: value }));\r\n  }\r\n\r\n  //Login button is pressed.\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    //Check that all necessary fields are filled, if not, show an alert error.\r\n    if (!user || !user.email || !user.password) {\r\n      setStatus({\r\n        msg: \"Write your credentials first!\",\r\n        severity: \"error\",\r\n        key: Math.random(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    //Send the post request to login the user.\r\n    fetch(\"/users/login/\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(user),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.success) {\r\n          //Save the token from the response to local storage.\r\n          localStorage.setItem(\"auth_token\", data.token);\r\n          navigate(\"/\");\r\n          //Reload the page so that elements that need the authToken recognize it has been set.\r\n          window.location.reload(false);\r\n        } else {\r\n          //Set alert status as an error if something went wrong.\r\n          if (data.msg) {\r\n            setStatus({ msg: data.msg, severity: \"error\", key: Math.random() });\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  return (\r\n    <Box className={classes.boxContainer}>\r\n      <h1>Login</h1>\r\n      <form id=\"login-form\" onSubmit={handleSubmit}>\r\n        <label>\r\n          <TextField label=\"email\" name=\"email\" onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n        <br />\r\n        <label>\r\n          <TextField\r\n            label=\"password\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <br />\r\n        <Button\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </form>\r\n      {status ? (\r\n        <AlertMessage\r\n          severity={status.severity}\r\n          message={status.msg}\r\n          key={status.key}\r\n        />\r\n      ) : null}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Box from \"@mui/material/Box\";\r\nimport useStyles from \"../materialui/Styles\";\r\nimport AlertMessage from \"../AlertMessage\";\r\n\r\n//Component to register new users\r\nexport const Register = () => {\r\n  //User is set unto this state\r\n  const [user, setUsers] = useState({});\r\n  //Classes to get styles\r\n  const classes = useStyles();\r\n  //Status is used for snackbar alert messages.\r\n  const [status, setStatus] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  //When data is changed in the form, get the name and value of the change and append or update them onto the user state.\r\n  function handleChange(event) {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    setUsers((values) => ({ ...values, [name]: value }));\r\n  }\r\n\r\n  //Register button is pressed.\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    //Check that all necessary fields are filled, if not, show an alert error.\r\n    if (!user || !user.email || !user.password) {\r\n      setStatus({\r\n        msg: \"Write your credentials first!\",\r\n        severity: \"error\",\r\n        key: Math.random(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    //Send the post request for the new user.\r\n    fetch(\"/users/register/\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(user),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //If register was succesfull, set alert status and navigate to login page\r\n        if (data.success) {\r\n          navigate(\"/login\");\r\n        } else {\r\n          //Set alert status as an error if something went wrong.\r\n          if (data.msg) {\r\n            setStatus({ msg: data.msg, severity: \"error\", key: Math.random() });\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  return (\r\n    <Box className={classes.boxContainer}>\r\n      <h1>Register</h1>\r\n      <form id=\"register-form\" onSubmit={handleSubmit}>\r\n        <label>\r\n          <TextField label=\"email\" name=\"email\" onChange={handleChange} />\r\n        </label>\r\n        <br /> <br />\r\n        <label>\r\n          <TextField\r\n            label=\"password\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <br />\r\n        <Button\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </form>\r\n      {status ? (\r\n        <AlertMessage\r\n          severity={status.severity}\r\n          message={status.msg}\r\n          key={status.key}\r\n        />\r\n      ) : null}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React, { useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport AlertMessage from \"../AlertMessage\";\r\n\r\nconst authToken = localStorage.getItem(\"auth_token\");\r\n\r\n//Component to send new posts.\r\nexport const PostForm = () => {\r\n  //Hold the post in the post state.\r\n  const [post, setPost] = useState({});\r\n  //Status is used for snackbar alert messages.\r\n  const [status, setStatus] = useState(null);\r\n\r\n  //When data is changed in the form, get the name and value of the change and append or update them onto the post state.\r\n  function handleChange(event) {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    setPost((values) => ({ ...values, [name]: value }));\r\n  }\r\n\r\n  //Submit post button is pressed\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    //Check that user is logged in and all the required fields are filled.\r\n    if (authToken && post.code && post.description && post.title) {\r\n      //Send a POST request with the new post.\r\n      fetch(\"/posts/\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(post),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + authToken,\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          //If post was added succesfully, set alert, empty the form and reload the page to show the new post.\r\n          if (data.success) {\r\n            document.getElementById(\"post-form\").value = \"\";\r\n            window.location.reload(false);\r\n          }\r\n          //If post was not added succesfully, set an alert showing an error.\r\n          else {\r\n            setStatus({\r\n              msg: data.msg,\r\n              severity: \"error\",\r\n              key: Math.random(),\r\n            });\r\n          }\r\n        });\r\n    }\r\n    //The user hadn't filled some part of the form so set an alert showing an error.\r\n    else {\r\n      setStatus({\r\n        msg: \"Write a post first!\",\r\n        severity: \"error\",\r\n        key: Math.random(),\r\n      });\r\n    }\r\n  }\r\n  //If user is logged in show the post form\r\n  if (authToken) {\r\n    return (\r\n      <div>\r\n        <form id=\"post-form\" onSubmit={handleSubmit}>\r\n          <h2>Post a new code snippet</h2>\r\n          <label>\r\n            <br />\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Title\"\r\n              name=\"title\"\r\n              onChange={handleChange}\r\n              fullWidth\r\n            />\r\n          </label>\r\n          <label>\r\n            <br />\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Description\"\r\n              name=\"description\"\r\n              onChange={handleChange}\r\n              multiline\r\n              rows={5}\r\n              fullWidth\r\n            />\r\n          </label>\r\n          <br />\r\n          <label>\r\n            <br />\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Code\"\r\n              name=\"code\"\r\n              onChange={handleChange}\r\n              multiline\r\n              rows={10}\r\n              fullWidth\r\n            />\r\n          </label>\r\n          <br />\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            value=\"Submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Submit\r\n          </Button>\r\n        </form>\r\n        {\r\n          //Showing the alert messages.\r\n          status ? (\r\n            <AlertMessage\r\n              severity={status.severity}\r\n              message={status.msg}\r\n              key={status.key}\r\n            />\r\n          ) : null\r\n        }\r\n      </div>\r\n    );\r\n  } else {\r\n    //Return empty div if user isn't logged in.\r\n    return <div></div>;\r\n  }\r\n};\r\n\r\nexport default PostForm;\r\n","import React, { useState } from \"react\";\r\nimport Search from \"@mui/icons-material/Search\";\r\nimport useStyles from \"../materialui/Styles\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport AlertMessage from \"../AlertMessage\";\r\n\r\n//Search posts component\r\nexport const SearchPosts = (props) => {\r\n  //Classes to set the styles\r\n  const classes = useStyles();\r\n  //Status is used for snackbar alert messages.\r\n  const [status, setStatus] = useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        className={classes.search}\r\n        type=\"text\"\r\n        name=\"search\"\r\n        label=\"Search\"\r\n        InputProps={{\r\n          endAdornment: <Search />,\r\n        }}\r\n        //On key press in the text field check if it was enter.\r\n        onKeyPress={async function search(e) {\r\n          if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n            //Search with the textfield value from the backend and de-select the textfield.\r\n            const searchTerm = e.target.value;\r\n            e.target.blur();\r\n            const response = await fetch(\"/posts/search/\" + searchTerm, {\r\n              method: \"GET\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            });\r\n            const searchResults = await response.json();\r\n\r\n            //If no posts were found, set a alert message.\r\n            if (searchResults.length === 0) {\r\n              setStatus({\r\n                msg: \"No posts found with those keywords\",\r\n                severity: \"error\",\r\n                key: Math.random(),\r\n              });\r\n            }\r\n            //Use the setPosts function from fetchPosts to set the posts with the searchresults.\r\n            props.setPosts(searchResults);\r\n          }\r\n        }}\r\n      />\r\n      {\r\n        //Showing the alert messages.\r\n        status ? (\r\n          <AlertMessage\r\n            severity={status.severity}\r\n            message={status.msg}\r\n            key={status.key}\r\n          />\r\n        ) : null\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPosts;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Cached from \"@mui/icons-material/Cached\";\r\n\r\nimport Typography from \"@mui/material/Typography\";\r\nimport * as hljs from \"highlight.js\";\r\n\r\nimport useStyles from \"../materialui/Styles\";\r\nimport SearchPosts from \"./SearchPosts\";\r\n\r\n//Fetch posts class to get the posts in a list.\r\nclass FetchPostsClass extends React.Component {\r\n  //Hold the posts in a state variable.\r\n  state = {\r\n    posts: null,\r\n  };\r\n\r\n  //Function for setting the posts. It's sent as props to the searchPosts component so it can set them as well.\r\n  setPosts(postData) {\r\n    //If the data is not empty, set the state with the data.\r\n    if (postData.length > 0) this.setState({ posts: postData });\r\n\r\n    //Highlight all of the code blocks using highlight.js highlightelement.\r\n    const codeBlocks = document.getElementsByClassName(\"code\");\r\n    for (var i = 0; i < codeBlocks.length; i++) {\r\n      hljs.highlightElement(codeBlocks[i]);\r\n    }\r\n  }\r\n\r\n  //Get the posts from the back end.\r\n  async fetchPosts() {\r\n    const response = await fetch(\"/posts/\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const postData = await response.json();\r\n    //Set the posts to the state.\r\n    this.setPosts(postData);\r\n  }\r\n\r\n  //On componentMount fetch the posts.\r\n  async componentDidMount() {\r\n    await this.fetchPosts();\r\n  }\r\n\r\n  render() {\r\n    //Get the navigate and classes from props\r\n    const { navigate } = this.props;\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <IconButton\r\n          //On reload button press fetch the posts again from back end.\r\n          onClick={() => {\r\n            this.fetchPosts();\r\n          }}\r\n          aria-label=\"Cached\"\r\n        >\r\n          <Cached />\r\n        </IconButton>\r\n\r\n        <SearchPosts\r\n          //Send the setPosts function to the SearchPosts component so it can set it's search results as the post's state.\r\n          setPosts={(data) => {\r\n            this.setPosts(data);\r\n          }}\r\n        ></SearchPosts>\r\n\r\n        {\r\n          //If no posts are found, send just the div\r\n          !this.state.posts ? (\r\n            <div>No posts found</div>\r\n          ) : (\r\n            //With posts, map the posts into a list.\r\n            <div>\r\n              <List>\r\n                {this.state.posts.map((post, index) => {\r\n                  return (\r\n                    <div key={index}>\r\n                      <ListItem\r\n                        className={classes.listItem}\r\n                        sx={{ bgcolor: \"primary.light\" }}\r\n                      >\r\n                        <Typography\r\n                          onClick={() => {\r\n                            navigate(\"posts/\" + post._id);\r\n                          }}\r\n                          sx={{ cursor: \"pointer\" }}\r\n                          variant=\"h5\"\r\n                        >\r\n                          {post.title}\r\n                        </Typography>\r\n                        <ListItemText\r\n                          sx={{\r\n                            display: \"inline-block\",\r\n                          }}\r\n                          primary={\r\n                            <React.Fragment>\r\n                              <Typography>{post.description}</Typography>\r\n                              <span className=\"code\">{post.code}</span>\r\n                            </React.Fragment>\r\n                          }\r\n                          secondary={\r\n                            <Typography\r\n                              className={classes.listItemSecondaryText}\r\n                              component=\"span\"\r\n                              variant=\"body2\"\r\n                              color=\"secondary\"\r\n                            >\r\n                              {\r\n                                //Remove everything after @ to make a username.\r\n                                post.user.substring(0, post.user.indexOf(\"@\"))\r\n                              }\r\n                              <br />\r\n                              {post.timestamp}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      </ListItem>\r\n                      <Divider\r\n                        variant=\"inset\"\r\n                        component=\"li\"\r\n                        className={classes.divider}\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n              </List>\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Export as a function component so we can use import functions. Send them as props to the FetchPostsClass which is returned here.\r\nexport default function FetchPosts(props) {\r\n  const navigate = useNavigate();\r\n  const classes = useStyles();\r\n  return <FetchPostsClass {...props} navigate={navigate} classes={classes} />;\r\n}\r\n","import React from \"react\";\r\nimport PostForm from \"./PostForm\";\r\nimport FetchPosts from \"./FetchPosts\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport useStyles from \"../materialui/Styles\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\n\r\n//Main dashboard component that holds the posts and the PostForm\r\nexport const Dashboard = () => {\r\n  const classes = useStyles();\r\n  const largeScreen = useMediaQuery((theme) => theme.breakpoints.up(\"md\"));\r\n\r\n  return (\r\n    <Box className={classes.dashBoardBox}>\r\n      {/* On small screens turn the direction into the column so users can just scroll down */}\r\n      <Grid direction={largeScreen ? \"row\" : \"column\"} container spacing={1}>\r\n        <Grid className={classes.fetchPosts} item xs={6}>\r\n          <FetchPosts></FetchPosts>\r\n        </Grid>\r\n        <Grid item xs={5} className={classes.postForm}>\r\n          <PostForm></PostForm>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\nexport default Dashboard;\r\n","import React from \"react\";\r\n\r\n//Component for all pages that are not specified in routes\r\nexport const NotFound = () => {\r\n  return (\r\n    <div>\r\n      <h1>404: webpage not found :c </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { Typography } from \"@mui/material\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport useStyles from \"./materialui/Styles\";\r\n\r\n// Navbar that holds navigation and the logout button.\r\nexport const NavBar = () => {\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  const navigate = useNavigate();\r\n  const largeScreen = useMediaQuery((theme) => theme.breakpoints.up(\"md\"));\r\n  const classes = useStyles();\r\n\r\n  function handleLogoutClick() {\r\n    localStorage.removeItem(\"auth_token\");\r\n    navigate(\"login\");\r\n    setLoggedIn(false);\r\n    //Reload page to reload react state so postform and like buttons disappear.\r\n    window.location.reload(false);\r\n  }\r\n\r\n  function goHome() {\r\n    navigate(\"\");\r\n  }\r\n\r\n  //On page load check if the user is logged in\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"auth_token\")) setLoggedIn(true);\r\n  }, []);\r\n\r\n  return (\r\n    /* If the user is logged in, return navbar with logout button. */\r\n    <div>\r\n      {loggedIn ? (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n          <AppBar position=\"static\">\r\n            <Toolbar>\r\n              <Grid\r\n                className={classes.navbarGrid}\r\n                container\r\n                spacing={3}\r\n                //Make the bar flow responsively depending on screen size\r\n                direction={largeScreen ? \"row\" : \"column\"}\r\n              >\r\n                <Grid item>\r\n                  {/* Title which is also a button that takes you to the homepage */}\r\n                  <Button color=\"secondary\" onClick={goHome} type=\"button\">\r\n                    <Typography\r\n                      className={classes.title}\r\n                      variant={largeScreen ? \"h3\" : \"h4\"}\r\n                    >\r\n                      Snippet Posts\r\n                    </Typography>\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Button\r\n                    onClick={handleLogoutClick}\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.navButton}\r\n                  >\r\n                    Logout\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </Box>\r\n      ) : (\r\n        /* If the user isn't logged in, return a navbar with login and register buttons. */\r\n        <Box sx={{ flexGrow: 1 }}>\r\n          <AppBar position=\"static\">\r\n            <Toolbar>\r\n              <Grid\r\n                className={classes.navbarGrid}\r\n                container\r\n                spacing={3}\r\n                direction={largeScreen ? \"row\" : \"column\"}\r\n              >\r\n                <Grid item>\r\n                  <Button onClick={goHome} type=\"button\" color=\"secondary\">\r\n                    <Typography\r\n                      className={classes.title}\r\n                      variant={largeScreen ? \"h3\" : \"h5\"}\r\n                    >\r\n                      Snippet Posts\r\n                    </Typography>\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link to=\"register\">\r\n                    <Button variant=\"contained\" color=\"secondary\" type=\"button\">\r\n                      Register\r\n                    </Button>\r\n                  </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link to=\"login\">\r\n                    <Button variant=\"contained\" color=\"secondary\" type=\"button\">\r\n                      Login\r\n                    </Button>\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport useStyles from \"../materialui/Styles\";\r\nimport AlertMessage from \"../AlertMessage\";\r\n\r\nconst authToken = localStorage.getItem(\"auth_token\");\r\n\r\nexport const AddComment = (props) => {\r\n  //Use a state to hold the comment.\r\n  const [comment, setComment] = useState({});\r\n  //Status is used for snackbar alert messages.\r\n  const [status, setStatus] = useState(null);\r\n  const classes = useStyles();\r\n\r\n  //Get post id from props\r\n  const { id } = props;\r\n\r\n  //When data is changed in the form, get the name and value and append or update them onto the comment state.\r\n  function handleChange(event) {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    setComment((values) => ({ ...values, [name]: value }));\r\n  }\r\n\r\n  //Add comment button is pressed\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    //If user is logged in and comment is not empty, send a POST request with the comment to the back end.\r\n    if (authToken && comment.content) {\r\n      fetch(\"/posts/comment/\" + id, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(comment),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + authToken,\r\n        },\r\n      }).then((res) => {\r\n        res.json().then((data) => {\r\n          //If comment was posted succesfully, set alert to show a success message.\r\n          if (data.success) {\r\n            setStatus({\r\n              msg: \"Comment posted!\",\r\n              severity: \"success\",\r\n              key: Math.random(),\r\n            });\r\n            //Empty the add comment field and fetch the post again to show the new comment.\r\n            document.getElementById(\"content\").value = \"\";\r\n            props.fetchPostAndHighlight(id);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      //User didn't write a comment before submitting so set an alert to show a error message.\r\n      setStatus({\r\n        msg: \"Write a comment first!\",\r\n        severity: \"error\",\r\n        key: Math.random(),\r\n      });\r\n    }\r\n  }\r\n\r\n  //Only show the add comment area if user is logged in.\r\n  if (authToken) {\r\n    return (\r\n      <div>\r\n        <TextField\r\n          className={classes.addCommentTextArea}\r\n          type=\"text\"\r\n          id=\"content\"\r\n          label=\"Add a comment\"\r\n          name=\"content\"\r\n          onChange={handleChange}\r\n          fullWidth\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          id=\"submit\"\r\n          value=\"Submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleSubmit}\r\n        >\r\n          comment\r\n        </Button>\r\n        {\r\n          //Showing the alert messages.\r\n          status ? (\r\n            <AlertMessage\r\n              severity={status.severity}\r\n              message={status.msg}\r\n              key={status.key}\r\n            />\r\n          ) : null\r\n        }\r\n      </div>\r\n    );\r\n  } else {\r\n    //Return empty div if user isn't logged in.\r\n    return <div></div>;\r\n  }\r\n};\r\n\r\nexport default AddComment;\r\n","//Jwt parsing function that is used to parse user info from jwt token\r\n//From this source:\r\n//https://stackoverflow.com/questions/54036341/how-to-get-user-information-from-jwt-cookie-in-nextjs-reactjs\r\n\r\nfunction ParseJwt(token) {\r\n  if (!token) {\r\n    return;\r\n  }\r\n  const base64Url = token.split(\".\")[1];\r\n  const base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\r\n  return JSON.parse(window.atob(base64));\r\n}\r\nexport default ParseJwt;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport useStyles from \"./materialui/Styles\";\r\nimport ThumbUp from \"@mui/icons-material/ThumbUp\";\r\nimport ThumbDown from \"@mui/icons-material/ThumbDown\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport ParseJwt from \"./toolfunctions/ParseJwt\";\r\n\r\nconst authToken = localStorage.getItem(\"auth_token\");\r\n\r\n//Vote system component, used in postDetails.\r\nexport const Likes = (props) => {\r\n  const classes = useStyles();\r\n  //Used to determine the current vote 1 is like, -1 is dislike and 0 is no vote.\r\n  const [vote, setVote] = useState(0);\r\n  //Used to determine the current amount of votes for the post, the amount without the current user's likes comes from props.\r\n  const [displayableVotes, setDisplayableVotes] = useState(props.post.likes);\r\n\r\n  //UseEffect to run everytime the post viewed changes, so essentially when a new post is opened.\r\n  useEffect(() => {\r\n    //If the user is not logged in, we don't need to check if the user has voted before.\r\n    if (!authToken) {\r\n      return;\r\n    } else {\r\n      //Here we check if the user has voted before.\r\n      async function getLikes() {\r\n        const parsedToken = ParseJwt(authToken);\r\n        //Fetch the user\r\n        let response = await fetch(\"/users/\" + parsedToken.id, {\r\n          method: \"GET\",\r\n        });\r\n        response = await response.json();\r\n        //Look if the post's id is found in the current user's vote array.\r\n        if (response) {\r\n          const foundVote = response.votes.find(\r\n            (element) => element.post.toString() === props.id\r\n          );\r\n          //The user has voted before, so there was either a 1 or a -1 in the database. Set the vote state accordingly.\r\n          if (foundVote) {\r\n            if (foundVote.vote === 1) {\r\n              setVote(1);\r\n            } else {\r\n              setVote(-1);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      getLikes();\r\n    }\r\n  }, [props.id]);\r\n\r\n  //This function updates the post's likes with the current user's vote when they like, dislike or undo their vote.\r\n  async function updateLikes(vote) {\r\n    await fetch(\"/posts/vote/\" + props.id, {\r\n      method: \"PATCH\",\r\n      body: JSON.stringify({ vote: vote }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + authToken,\r\n      },\r\n    });\r\n  }\r\n\r\n  //When a vote needs to be undone, just set the vote state to 0 and send a 0 from the current user to the back end.\r\n  async function handleUndoLike(vote) {\r\n    setVote(0);\r\n    await updateLikes(0);\r\n  }\r\n\r\n  //Handling a like button press\r\n  async function Like() {\r\n    if (vote === 1) {\r\n      //If the user had liked before, undo the like and remove 1 from the displayableVotes.\r\n      setDisplayableVotes(displayableVotes - 1);\r\n      handleUndoLike(1);\r\n    } else if (vote === -1) {\r\n      //If the user had disliked before\r\n      //Change the displayable votes to be 2 more than before, since the dislike turns into a like.\r\n      setDisplayableVotes(displayableVotes + 2);\r\n      //Undo the dislike, then set the like state and update the back end's votes with the new like.\r\n      await handleUndoLike(-1);\r\n      setVote(1);\r\n      await updateLikes(1);\r\n    } else {\r\n      //The current user hadn't voted before on this post, so simply set both states and update the back end's votes with the new like.\r\n      setDisplayableVotes(displayableVotes + 1);\r\n      setVote(1);\r\n      await updateLikes(1);\r\n    }\r\n  }\r\n  async function Dislike() {\r\n    if (vote === -1) {\r\n      //If the user had disliked before, undo the dislike and add 1 to the displayableVotes.\r\n      setDisplayableVotes(displayableVotes + 1);\r\n      handleUndoLike(-1);\r\n    } else if (vote === 1) {\r\n      //If the user had liked before\r\n      //Change the displayable votes to be 2 less than before, since the like turns into a dislike.\r\n      setDisplayableVotes(displayableVotes - 2);\r\n      //Undo the like, then set the dislike state and update the back end's votes with the new dislike.\r\n      await handleUndoLike(1);\r\n      setVote(-1);\r\n      await updateLikes(-1);\r\n    } else {\r\n      //The current user hadn't voted before on this post, so simply set both states and update the back end's votes with the new dislike.\r\n      setDisplayableVotes(displayableVotes - 1);\r\n      setVote(-1);\r\n      await updateLikes(-1);\r\n    }\r\n  }\r\n  //The user needs to be logged in to see the like and dislike buttons.\r\n  if (authToken) {\r\n    return (\r\n      <Grid container className={classes.likesGrid}>\r\n        <Grid item>{displayableVotes}</Grid>\r\n        <IconButton\r\n          //The button's color changes whether the user has liked the post before.\r\n          color={vote === 1 ? \"select\" : \"secondary\"}\r\n          onClick={Like}\r\n          aria-label=\"ThumbUp\"\r\n        >\r\n          <ThumbUp />\r\n        </IconButton>\r\n        <IconButton\r\n          //The button's color changes whether the user has disliked the post before.\r\n          color={vote === -1 ? \"select\" : \"secondary\"}\r\n          onClick={Dislike}\r\n          aria-label=\"ThumbDown\"\r\n        >\r\n          <ThumbDown />\r\n        </IconButton>\r\n      </Grid>\r\n    );\r\n  } else {\r\n    //If the user isn't logged in just show the amount of likes.\r\n    return (\r\n      <Grid container className={classes.likesGrid}>\r\n        <Grid item>Likes: {displayableVotes}</Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Likes;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AddComment from \"./AddComment\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport * as hljs from \"highlight.js\";\r\nimport useStyles from \"../materialui/Styles\";\r\nimport Likes from \"../Likes\";\r\n\r\n//Class component to view a post's details, including likes and comments.\r\nclass PostDetailsClass extends React.Component {\r\n  //State to hold the post, updating the page when the state changes.\r\n  state = {\r\n    post: null,\r\n  };\r\n\r\n  //On component mounting, fetch the post by id and highlight it.\r\n  async componentDidMount() {\r\n    const { id } = this.props;\r\n    this.fetchPostAndHighlight(id);\r\n  }\r\n\r\n  async fetchPostAndHighlight(id) {\r\n    //Fetch post by id\r\n    const response = await fetch(\"/posts/\" + id, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    const postData = await response.json();\r\n    //Set the post as state\r\n    if (postData) this.setState({ post: postData });\r\n\r\n    //Highlight the code section.\r\n    const codeBlock = document.getElementById(\"code\");\r\n    hljs.highlightElement(codeBlock);\r\n  }\r\n\r\n  render() {\r\n    //Load props and state onto variables to use them\r\n    const post = this.state.post;\r\n    const { id } = this.props;\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          //Check if the post is null, if it is return just the div\r\n          !this.state.post ? (\r\n            <div>No post found</div>\r\n          ) : (\r\n            //If post is found return details.\r\n            <Box className={classes.postDetailsBox}>\r\n              <Box className={classes.postBox} bgcolor=\"primary.light\">\r\n                <Typography variant=\"h4\">{post.title}</Typography>\r\n                <Typography className={classes.postContent}>\r\n                  {post.description}\r\n                </Typography>\r\n                <span id=\"code\" className={classes.postContent}>\r\n                  {post.code}\r\n                </span>\r\n                <Typography className={classes.postInfo}>\r\n                  {\r\n                    //Remove everything after @ to make a username.\r\n                    post.user.substring(0, post.user.indexOf(\"@\"))\r\n                  }\r\n                  <br />\r\n                  {post.timestamp}\r\n                </Typography>\r\n                <Likes post={post} id={id} />\r\n              </Box>\r\n              {/* Adding comments component, send the id and fetchPostAndHighlight function as props to update the post when new comments are posted */}\r\n              <AddComment\r\n                id={id}\r\n                fetchPostAndHighlight={(data) => {\r\n                  this.fetchPostAndHighlight(data);\r\n                }}\r\n              ></AddComment>\r\n\r\n              {\r\n                //Map the comments, if none are found return null\r\n                post.comments\r\n                  ? post.comments.map((comment, index) => {\r\n                      return (\r\n                        <div key={index}>\r\n                          <Grid item>\r\n                            <Typography className={classes.commentContent}>\r\n                              {comment.content}\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid className={classes.postInfo} container>\r\n                            <Grid item xs={1} color=\"secondary\">\r\n                              <Typography>\r\n                                {\r\n                                  //Remove everything after @ to make a username.\r\n                                  comment.user.substring(\r\n                                    0,\r\n                                    comment.user.indexOf(\"@\")\r\n                                  )\r\n                                }\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={8} color=\"secondary\">\r\n                              <Typography>{comment.timestamp}</Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n                          <Divider\r\n                            className={classes.divider}\r\n                            variant=\"inset\"\r\n                          />\r\n                        </div>\r\n                      );\r\n                    })\r\n                  : null\r\n              }\r\n            </Box>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Export as a function component so we can use import functions. Send them as props to the PropsDetailsClass which is returned here.\r\nexport default function PostDetails(props) {\r\n  const { id } = useParams();\r\n  const classes = useStyles();\r\n  return <PostDetailsClass {...props} id={id} classes={classes} />;\r\n}\r\n","import { createTheme } from \"@mui/material/styles\";\r\n//App theme is defined here.\r\n//The app is wrapped with the theme in app.js\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      // light: will be calculated from palette.primary.main,\r\n      main: \"#B4C9CF\",\r\n      background: \"#E6EDEF\",\r\n      // dark: will be calculated from palette.primary.main,\r\n      contrastText: \"#3C3C3B\",\r\n    },\r\n    secondary: {\r\n      main: \"#3C3C3B\",\r\n      // dark: will be calculated from palette.secondary.main,\r\n      contrastText: \"#B4C9CF\",\r\n    },\r\n    select: {\r\n      main: \"#3B60E4\",\r\n    },\r\n\r\n    // Used by `getContrastText()` to maximize the contrast between\r\n    // the background and the text.\r\n    contrastThreshold: 3,\r\n    // Used by the functions below to shift a color's luminance by approximately\r\n    // two indexes within its tonal palette.\r\n    // E.g., shift from Red 500 to Red 300 or Red 700.\r\n    tonalOffset: 0.2,\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import { Routes, Route } from \"react-router-dom\";\r\nimport Login from \"./components/authenthication/Login\";\r\nimport Register from \"./components/authenthication/Register\";\r\nimport Dashboard from \"./components/dashboard/Dashboard\";\r\nimport NotFound from \"./components/NotFound\";\r\nimport NavBar from \"./components/Navbar\";\r\nimport PostDetails from \"./components/postDetails/PostDetails\";\r\nimport { ThemeProvider } from \"@mui/material/styles\";\r\nimport theme from \"./components/materialui/Theme\";\r\nimport { Box } from \"@mui/system\";\r\n\r\n//The main app component\r\n//All of the react routes are specified in this component.\r\nfunction App() {\r\n  return (\r\n    //Setting the theme for the whole app by wrapping the main box in a themeprovider\r\n    <ThemeProvider theme={theme}>\r\n      {/*Box that holds the whole page. \r\n      The background color and the text color is set here.*/}\r\n      <Box\r\n        sx={{\r\n          color: \"primary.contrastText\",\r\n          bgcolor: \"primary.background\",\r\n          width: \"100%\",\r\n          minHeight: \"100vh\",\r\n        }}\r\n      >\r\n        <NavBar />\r\n        <Routes>\r\n          <Route path=\"/\" element={<Dashboard />}></Route>\r\n          <Route path=\"/posts/:id\" element={<PostDetails />}></Route>\r\n          <Route path=\"/login\" element={<Login />}></Route>\r\n          <Route path=\"/Register\" element={<Register />}></Route>\r\n          <Route path=\"*\" element={<NotFound />}></Route>\r\n        </Routes>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./ocean.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\n//Rendering the app, wrapped by router here so it can be used everywhere\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}